import streamlit as st
import pandas as pd
import plotly.express as px
import matplotlib.pyplot as plt

# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
df = pd.read_parquet("merged_cleaned_data_small.parquet") 
# ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV
forecast_df = pd.read_parquet("forecast_df.parquet")

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏õ‡∏µ
forecast_df["year"] = forecast_df["date"].dt.year
annual_sales = forecast_df.groupby(["year", "model"])["sales"].sum().reset_index()


# Sidebar: Filter options
st.sidebar.header("üìä Filter Options")

# ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
st.sidebar.markdown(f"**üóì Data available from:** `{df['date'].min().date()}` to `{df['date'].max().date()}`")

# ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô/‡∏Ñ‡∏•‡∏±‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå/‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
store_types = st.sidebar.multiselect("Store Type", options=df["type"].unique(), default=df["type"].unique())
clusters = st.sidebar.multiselect("Cluster", options=df["cluster"].unique(), default=df["cluster"].unique())
families = st.sidebar.multiselect("Product Family", options=df["family"].unique(), default=df["family"].unique())

# Date Picker
min_date = df["date"].min()
max_date = df["date"].max()
date_range = st.sidebar.date_input("Select Date Range", [min_date, max_date], min_value=min_date, max_value=max_date)

# Apply filters
df_filtered = df[
    df["type"].isin(store_types) &
    df["cluster"].isin(clusters) &
    df["family"].isin(families) &
    (df["date"] >= pd.to_datetime(date_range[0])) &
    (df["date"] <= pd.to_datetime(date_range[1]))
]

# Title
st.title("üìà Sales Dashboard - Favorita Dataset")

# KPI Section
st.subheader("üìå Key Performance Indicators")
col1, col2, col3 = st.columns(3)
with col1:
    st.metric("üõí Total Sales", f"${df_filtered['sales'].sum():,.0f}")
with col2:
    st.metric("üìÜ Avg Daily Sales", f"${df_filtered.groupby('date')['sales'].sum().mean():,.2f}")
with col3:
    st.metric("üè™ Active Stores", df_filtered["store_nbr"].nunique())

# Chart 1: Total Sales Over Time
# üîÑ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏ó‡∏µ‡πà‡∏î‡∏π‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô
# üîÑ ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô + ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ 7 ‡∏ß‡∏±‡∏ô
st.subheader("üïí Total Sales Over Time (with 7-day Rolling Average)")
daily_sales = df_filtered.groupby("date")["sales"].sum().reset_index()
daily_sales["rolling_sales"] = daily_sales["sales"].rolling(window=7).mean()

# ‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏™‡πâ‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥
fig1 = px.line(daily_sales, x="date", y="sales", title="Total Sales by Day", 
               labels={"sales": "Daily Sales", "date": "Date"})

# ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÇ‡∏õ‡∏£‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏™‡πâ‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
fig1.update_traces(opacity=0.3, name="Daily Sales", line=dict(color="lightblue"))

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ 7 ‡∏ß‡∏±‡∏ô
fig1.add_scatter(x=daily_sales["date"], y=daily_sales["rolling_sales"], 
                 mode="lines", name="7-Day Avg", line=dict(color="orange", width=3))

# ‡∏õ‡∏£‡∏±‡∏ö layout
fig1.update_layout(
    legend=dict(yanchor="top", y=0.99, xanchor="left", x=0.01),
    hovermode="x unified"
)

st.plotly_chart(fig1, use_container_width=True)


# Chart 2: Average Sales by Store Type
st.subheader("üè™ Average Sales per Store Type")
avg_sales_type = df_filtered.groupby("type")["sales"].mean().reset_index()
fig2 = px.bar(avg_sales_type, x="type", y="sales", title="Average Sales by Store Type", text_auto=True)
st.plotly_chart(fig2, use_container_width=True)

# Chart 3: Total Sales by Product Family
st.subheader("üß∫ Total Sales by Product Family")
family_sales = df_filtered.groupby("family")["sales"].sum().reset_index().sort_values("sales", ascending=True)
fig3 = px.bar(family_sales, x="sales", y="family", orientation="h", title="Total Sales by Product Family")
st.plotly_chart(fig3, use_container_width=True)

# Chart 4: Top 10 Performing Stores
st.subheader("üèÜ Top 10 Stores by Total Sales")
top_stores = df_filtered.groupby("store_nbr")["sales"].sum().reset_index().sort_values("sales", ascending=False).head(10)
fig4 = px.bar(top_stores, x="store_nbr", y="sales", title="Top 10 Stores by Sales", text_auto=True)
st.plotly_chart(fig4, use_container_width=True)

# Chart 5: Seasonality Trend
st.subheader("üìÜ Seasonality Trend: Sales by Month")
monthly = df_filtered.groupby(df_filtered["date"].dt.to_period("M"))["sales"].sum().reset_index()
monthly["date"] = monthly["date"].astype(str)
fig5 = px.line(monthly, x="date", y="sales", title="Monthly Sales Trend", markers=True)
st.plotly_chart(fig5, use_container_width=True)

# Chart 6: Sales Share by Cluster
st.subheader("üß© Sales Proportion by Cluster")
sales_cluster = df_filtered.groupby("cluster")["sales"].sum().reset_index()
fig6 = px.pie(sales_cluster, names="cluster", values="sales", title="Sales Share by Cluster")
st.plotly_chart(fig6, use_container_width=True)

# Heatmap
# üî• Sales Heatmap: Day of Week vs Month
st.subheader("üî• Sales Heatmap: Day of Week vs Month")

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ß‡∏±‡∏ô‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
days_order = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]
df_filtered["dayofweek"] = pd.Categorical(df_filtered["date"].dt.day_name(), categories=days_order, ordered=True)
df_filtered["month"] = df_filtered["date"].dt.strftime("%b")

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á heatmap
heatmap_data = df_filtered.groupby(["dayofweek", "month"])["sales"].mean().reset_index()
heatmap_pivot = heatmap_data.pivot(index="dayofweek", columns="month", values="sales")

# ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö
months_order = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", 
                "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
heatmap_pivot = heatmap_pivot[months_order]  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á column ‡πÉ‡∏´‡∏°‡πà

# ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡∏µ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°
st.write(
    heatmap_pivot.style
        .format("{:,.0f}")
        .background_gradient(cmap='Blues', axis=None)
        .set_properties(**{'text-align': 'center'})
        .set_table_styles([{
            'selector': 'th',
            'props': [('text-align', 'center')]
        }])
)

import plotly.express as px
import streamlit as st
import pandas as pd

st.subheader("üìÖ Annual Sales Forecast (2017‚Äì2027) by Model")

fig_forecast = px.line(
    annual_sales,
    x="year",
    y="sales",
    color="model",
    markers=True,
    title="Predicted Annual Sales by Model (Next 10 Years)"
)

fig_forecast.update_layout(
    xaxis_title="Year",
    yaxis_title="Total Predicted Sales",
    hovermode="x unified"
)

st.plotly_chart(fig_forecast, use_container_width=True)
# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏õ‡∏µ
df["year_month"] = df["date"].dt.to_period("M").dt.to_timestamp()

# ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ cluster
monthly_cluster_sales = df.groupby(["year_month", "cluster"])["sales"].sum().reset_index()
monthly_cluster_sales["prev_sales"] = monthly_cluster_sales.groupby("cluster")["sales"].shift(1)
monthly_cluster_sales["change_percent"] = ((monthly_cluster_sales["sales"] - monthly_cluster_sales["prev_sales"]) / monthly_cluster_sales["prev_sales"]) * 100

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏ä‡∏¥‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå
def recommend_strategy(row):
    if pd.isna(row["change_percent"]):
        return "N/A"
    elif row["change_percent"] < -10:
        return "üîª ‡πÇ‡∏õ‡∏£‡πÇ‡∏°‡∏ä‡∏±‡∏ô/‡∏à‡∏±‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ï‡∏∏‡πâ‡∏ô‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢"
    elif row["change_percent"] > 10:
        return "üìà ‡∏Ç‡∏¢‡∏≤‡∏¢‡∏™‡∏ï‡πá‡∏≠‡∏Å/‡∏Ç‡∏¢‡∏≤‡∏¢‡∏™‡∏≤‡∏Ç‡∏≤"
    else:
        return "‚úÖ ‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡πÅ‡∏ú‡∏ô"

monthly_cluster_sales["recommendation"] = monthly_cluster_sales.apply(recommend_strategy, axis=1)

# Dashboard ‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏°‡πà
st.subheader("üìâ Cluster Monthly KPI Monitor")

# ‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢
fig_cluster_line = px.line(
    monthly_cluster_sales,
    x="year_month",
    y="sales",
    color="cluster",
    title="‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° Cluster",
    markers=True,
)
st.plotly_chart(fig_cluster_line, use_container_width=True)

# ‡∏ï‡∏≤‡∏£‡∏≤‡∏á Insight ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
st.subheader("üìã ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏ä‡∏¥‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå")
st.dataframe(
    monthly_cluster_sales[["year_month", "cluster", "sales", "change_percent", "recommendation"]]
    .sort_values(by=["year_month", "cluster"]),
    use_container_width=True
)
# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ó‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á dashboard ‡πÄ‡∏î‡∏¥‡∏° (‡πÄ‡∏ä‡πà‡∏ô ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å section ‡πÅ‡∏£‡∏Å ‡πÜ ‡∏ó‡∏µ‡πà plot graph ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô/‡∏£‡∏≤‡∏¢‡∏õ‡∏µ)

import pandas as pd
import plotly.express as px

# --- ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ---
df["year_month"] = df["date"].dt.to_period("M").astype(str)

monthly_cluster_sales = (
    df.groupby(["cluster", "year_month"])["sales"]
    .sum()
    .reset_index()
)

top_n = 5  # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô cluster ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ô‡∏≥‡∏°‡∏≤‡πÅ‡∏™‡∏î‡∏á
top_clusters = (
    monthly_cluster_sales.groupby("cluster")["sales"]
    .sum()
    .sort_values(ascending=False)
    .head(top_n)
    .index.tolist()
)

filtered_df = monthly_cluster_sales[monthly_cluster_sales["cluster"].isin(top_clusters)]

# --- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü ---
fig_cluster_line = px.line(
    filtered_df,
    x="year_month",
    y="sales",
    color="cluster",
    title=f"üìä ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (Top {top_n} Cluster ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)",
    markers=True,
)

fig_cluster_line.update_layout(
    xaxis_title="‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
    yaxis_title="‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°",
    legend_title="Cluster",
    height=500,
    template="plotly_dark",
)

fig_cluster_line.update_traces(mode="lines+markers", line=dict(width=3))

# --- ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡∏ö‡∏ô Dashboard ---
st.plotly_chart(fig_cluster_line, use_container_width=True)
st.subheader("üß† Strategic Insights by Cluster")

with st.container():
    col1, col2, col3 = st.columns(3)

    with col1:
        st.markdown("### üîº Cluster 3, 5, 8")
        st.success(
            """
            **Insight:** Strong and growing sales.  
            **Strategy:**  
            - Expand inventory capacity  
            - Run loyalty & VIP programs  
            - Target high-spending customers  
            """
        )

    with col2:
        st.markdown("### üîÅ Cluster 2, 6, 10")
        st.info(
            """
            **Insight:** Sales are steady but flat.  
            **Strategy:**  
            - A/B test promotions  
            - Update product selection  
            - Monitor competitor activity  
            """
        )

    with col3:
        st.markdown("### üîª Cluster 1, 7, 11")
        st.warning(
            """
            **Insight:** Sales declining over time.  
            **Strategy:**  
            - Investigate churn causes  
            - Offer aggressive discounts  
            - Launch reactivation campaigns  
            """
        )

# Optional separator or summary
st.markdown("---")
st.markdown("""
üìå **Note:** These strategic suggestions are based on historical trends. Regularly monitor KPIs and validate via experiments.
""")
# üìå ‡∏™‡πà‡∏ß‡∏ô: Simulate Strategy
st.subheader("üß™ Strategy Simulation")

increase_pct = st.slider("üìà ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢ (%)", min_value=0, max_value=100, value=10, step=5)

simulate = st.button("üöÄ Simulate Strategy")
if simulate:
    df_simulated = df_filtered.copy()
    df_simulated["sales"] = df_simulated["sales"] * (1 + increase_pct / 100)

    monthly_before = df_filtered.groupby(df_filtered["date"].dt.to_period("M"))["sales"].sum().reset_index()
    monthly_before["date"] = monthly_before["date"].astype(str)
    monthly_before["strategy"] = "Before"

    monthly_after = df_simulated.groupby(df_simulated["date"].dt.to_period("M"))["sales"].sum().reset_index()
    monthly_after["date"] = monthly_after["date"].astype(str)
    monthly_after["strategy"] = "After"

    compare_df = pd.concat([monthly_before, monthly_after])

    fig_sim = px.line(compare_df, x="date", y="sales", color="strategy",
                      title="üìä Monthly Sales: Before vs After Strategy",
                      markers=True)

    st.plotly_chart(fig_sim, use_container_width=True)

    delta = monthly_after["sales"].sum() - monthly_before["sales"].sum()
    percent_change = (delta / monthly_before["sales"].sum()) * 100

    st.success(f"‚úÖ ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô {percent_change:.2f}% ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå")
else:
    st.info("‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° üöÄ Simulate Strategy ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡πÉ‡∏´‡∏°‡πà")

